frenet_follower_node:
  ros__parameters:
    # ============================================================================
    # OPTIMIZED STEERING CONTROL PARAMETERS
    # ============================================================================
    # The frenet_follower uses a direct path following approach that eliminates
    # the need for lookahead distance tuning. Instead of Pure Pursuit's geometric
    # following, it combines three control components for superior performance:
    #
    # CONTROL LAW: δ = k_h * e_heading + k_l(v) * e_lateral + k_κ * κ_path
    #
    # Benefits over Pure Pursuit:
    # - No lookahead tuning required (eliminates major tuning parameter)
    # - More precise path following at all speeds
    # - Better corner entry/exit (curvature feedforward anticipates turns)
    # - Lower computational cost (no lookahead point search)
    # - Velocity-adaptive lateral gain (stable at all speeds)
    # ============================================================================

    # COMPONENT 1: Heading Error Control
    # ----------------------------------------------------------------------------
    k_heading: 1.5                   # Heading alignment gain
                                     # EFFECT: Controls how aggressively vehicle aligns with path heading
                                     #         Higher = faster heading convergence, may oscillate
                                     #         Lower = smoother but slower heading alignment
                                     # FORMULA: δ_heading = k_heading * (path_yaw - vehicle_yaw)
                                     # TYPICAL: 1.0-2.0 for F1TENTH
                                     # TUNING: If vehicle oscillates in heading, reduce this
                                     #         If heading response is too slow, increase this

    # COMPONENT 2: Lateral Error Feedback (Stanley-inspired)
    # ----------------------------------------------------------------------------
    k_lateral: 1.2                   # Lateral error gain (base value)
                                     # EFFECT: Controls cross-track error correction strength
                                     #         Higher = stronger pull toward centerline
                                     #         Lower = more relaxed lateral tracking
                                     # FORMULA: δ_lateral = atan(k_l(v) * e_y / v)
                                     #   where k_l(v) = k_lateral / (1 + k_lateral_velocity * v)
                                     # TYPICAL: 0.5-1.5 for F1TENTH
                                     # BENEFIT: Velocity adaptation prevents overshoot at high speeds

    k_lateral_velocity: 0.1          # Velocity-adaptive lateral gain reduction
                                     # EFFECT: Reduces lateral gain at high speeds for stability
                                     #         k_l(v) = k_lateral / (1 + k_lateral_velocity * v)
                                     # EXAMPLE: At v=5 m/s with k_lateral=0.8, k_lateral_velocity=0.1:
                                     #          k_l(5) = 0.8 / (1 + 0.1*5) = 0.533
                                     # TYPICAL: 0.05-0.2
                                     # TUNING: If high-speed oscillates laterally, increase this

    # COMPONENT 3: Curvature Feedforward
    # ----------------------------------------------------------------------------
    use_curvature_feedforward: true  # Enable proactive curvature-based steering
                                     # EFFECT: Anticipates path curvature for early steering input
                                     # BENEFIT: Reduces tracking lag in corners
                                     #          Improves corner entry/exit smoothness
                                     #          Lower lateral error in turns
                                     # WHEN TO DISABLE: If path curvature data is noisy

    k_curvature: 0.8                 # Curvature feedforward gain
                                     # EFFECT: Scales path curvature to steering input
                                     # FORMULA: δ_curvature = k_curvature * wheelbase * κ_path
                                     # where κ_path is path curvature at target point
                                     # TYPICAL: 0.8-1.2 (1.0 = perfect bicycle model)
                                     # TUNING: If understeering in corners, increase
                                     #         If oversteering in corners, decrease
                                     # NOTE: Requires accurate path curvature information

    curvature_epsilon: 0.001         # Small value to avoid division by zero
                                     # TECHNICAL: Numerical stability parameter

    # ============================================================================
    # STEERING FILTER PARAMETERS
    # ============================================================================
    # Low-pass filter to smooth steering commands

    use_steering_filter: true        # Enable steering low-pass filter
                                     # EFFECT: Smooths rapid steering changes
                                     # BENEFIT: Reduces mechanical wear, improves stability

    steering_alpha: 0.3              # Filter coefficient (0-1): higher = more responsive
                                     # EFFECT: filtered = alpha * raw + (1-alpha) * previous
                                     #         0.0 = maximum smoothing (no response)
                                     #         1.0 = no filtering (instant response)
                                     # TYPICAL: 0.2-0.5
                                     # TUNING: If steering feels laggy, increase
                                     #         If steering is jerky, decrease

    # ============================================================================
    # VEHICLE PARAMETERS
    # ============================================================================

    wheelbase: 0.33                  # Vehicle wheelbase [m]
                                     # IMPORTANT: Must match actual vehicle
                                     # EFFECT: Used in curvature feedforward calculation

    max_steering_angle: 0.4189       # Maximum steering angle [rad] (~24 degrees)
                                     # EFFECT: Hard limit on steering commands
                                     # SAFETY: Prevents exceeding servo/vehicle limits

    # ============================================================================
    # PATH TRACKING PARAMETERS
    # ============================================================================

    path_timeout: 1.0                # Path timeout [s]
                                     # EFFECT: Maintains last command if no new path received
                                     # SAFETY: Prevents runaway if planning fails

    max_lateral_error: 3.0           # Maximum lateral error before stopping [m]
                                     # SAFETY: Stops vehicle if too far from path
                                     # TYPICAL: 2.0-5.0 m

    # FORWARD TRACKING (for low odom frequency)
    # ----------------------------------------------------------------------------
    use_forward_tracking: true      # Enable sequential path following
                                     # PROBLEM: Low odom frequency (< 20Hz) may cause controller
                                     #          to target the same path point repeatedly
                                     # SOLUTION: Search only forward indices from last target point
                                     # EFFECT: Ensures sequential progression along planned_path
                                     # BENEFIT:
                                     #   - Smoother path following with low-rate odometry
                                     #   - Prevents "sticking" to same target point
                                     #   - Better tracking with delayed odom updates
                                     # WHEN TO ENABLE:
                                     #   - Odom frequency < 20Hz
                                     #   - Using low-rate localization (e.g., GPS at 10Hz)
                                     #   - Vehicle seems to "hesitate" or target same point
                                     # WHEN TO DISABLE:
                                     #   - High-frequency odom (> 50Hz)
                                     #   - Standard particle filter at 50-100Hz
                                     #   - May cause issues if vehicle deviates significantly

    forward_search_range: 2.0        # Forward search range [m] from last target
                                     # EFFECT: Defines how far ahead to look for next target
                                     # FORMULA: search_window = forward_search_range / 0.1
                                     #          (0.1m = path interpolation resolution)
                                     # EXAMPLE: 2.0m range = 20 waypoints forward search
                                     # TUNING:
                                     #   - Too small (< 1.0m): May miss target if vehicle moves fast
                                     #   - Too large (> 5.0m): Reduces forward tracking benefit
                                     #   - Recommended: 2.0-3.0m for most cases
                                     # NOTE: If no point found in range, falls back to full search

    # ============================================================================
    # SPEED CONTROL PARAMETERS
    # ============================================================================
    # Speed control follows the same logic as path_tracker

    default_speed: 2.0               # Default driving speed [m/s]
                                     # EFFECT: Used when speed_mode = "default"

    speed_mode: "optimize"           # Speed control strategy
                                     # OPTIONS:
                                     # "default" = Use constant default_speed
                                     # "path_velocity" = Use velocity from planned_path
                                     # "curvature" = Calculate from path curvature
                                     # "optimize" = min(path_velocity, curvature)

    friction_coeff: 0.9              # Friction coefficient for curvature-based speed
                                     # EFFECT: v_max = sqrt(mu * g * R)

    max_speed_limit: 8.0             # Maximum speed limit [m/s]
    min_speed_limit: 0.5             # Minimum speed limit [m/s]

    # ============================================================================
    # DEBUG MODE PARAMETERS
    # ============================================================================

    debug_mode: true                 # Enable debug mode for testing
                                     # EFFECT: Applies velocity_gain to limit speed

    velocity_gain: 0.3               # Speed multiplier in debug mode (0.0-1.0)
                                     # EFFECT: actual_speed = target_speed * velocity_gain
                                     # NOTE: Only applies when debug_mode = true

    debug_min_speed: 0.6             # Minimum speed in debug mode [m/s]
                                     # SAFETY: Prevents too slow movement during testing

    # ============================================================================
    # SIMULATION MODE PARAMETERS
    # ============================================================================

    sim_mode: true                   # Enable simulation mode
                                     # EFFECT: Uses sim_odom topic instead of odom_topic

    sim_odom: "/ego_racecar/odom"    # Odometry topic for simulation

    # ============================================================================
    # POSITION COMPENSATION (LATENCY COMPENSATION)
    # ============================================================================

    use_position_compensation: true  # Enable position compensation
                                     # EFFECT: Predicts future position to compensate for delay
                                     # BENEFIT: Better path tracking at high speeds

    expected_computation_time: 0.01  # Expected control loop computation time [s]
                                     # TYPICAL: 0.01s (10ms) for 100Hz control loop

    # ============================================================================
    # ACCELERATION LIMITING (FRICTION CIRCLE)
    # ============================================================================

    use_acceleration_limit: false    # Enable friction circle acceleration limiting
                                     # EFFECT: Limits longitudinal accel based on lateral accel

    lateral_accel_lookup_table: "dawgs_lookup_table.csv"
    package_share_dir: "/home/dawgs_nx/f1tenth_dawgs/src/controller/frenet_follower/config"
    max_total_acceleration: 12.0     # Maximum total acceleration [m/s^2]

    # ============================================================================
    # TOPICS
    # ============================================================================

    odom_topic: "/pf/pose/odom"      # Odometry topic (localization input)
    drive_topic: "/drive"            # Drive command output (Ackermann)
    path_topic: "/planned_path"      # Path to follow (from path_planner)
    global_path_topic: "/global_centerline"  # Global reference path
    base_frame: "base_link"          # Vehicle base frame

# ============================================================================
# STEERING CONTROL OPTIMIZATION SUMMARY
# ============================================================================
#
# The frenet_follower implements an optimized direct path following controller
# that outperforms traditional Pure Pursuit in several key aspects:
#
# 1. NO LOOKAHEAD TUNING REQUIRED
#    - Pure Pursuit requires careful lookahead distance tuning
#    - frenet_follower directly follows closest path point
#    - One less critical parameter to tune
#
# 2. VELOCITY-ADAPTIVE LATERAL GAIN
#    - Automatic gain scheduling based on velocity
#    - Prevents overshoot at high speeds
#    - Maintains tight tracking at low speeds
#    - Formula: k_l(v) = k_lateral / (1 + k_lateral_velocity * v)
#
# 3. CURVATURE FEEDFORWARD
#    - Anticipates turns before reaching them
#    - Reduces tracking lag in corners
#    - Smoother corner entry and exit
#    - Based on path geometry, not reactive to errors
#
# 4. MULTI-COMPONENT CONTROL
#    - Heading error: Aligns vehicle direction with path
#    - Lateral error: Corrects cross-track distance
#    - Curvature feedforward: Proactive turn steering
#    - Each component handles specific tracking aspect
#
# 5. COMPUTATIONAL EFFICIENCY
#    - No lookahead point search required
#    - Simple closest point lookup
#    - Direct steering calculation
#    - Lower CPU usage than Pure Pursuit
#
# TUNING GUIDELINES:
# ===================
#
# STEP 1: Start with default values
#   k_heading = 1.5
#   k_lateral = 0.8
#   k_lateral_velocity = 0.1
#   k_curvature = 1.0
#
# STEP 2: Tune heading control
#   - If oscillates in heading → reduce k_heading to 1.0
#   - If slow heading alignment → increase k_heading to 2.0
#
# STEP 3: Tune lateral control
#   - If oscillates laterally at high speed → increase k_lateral_velocity to 0.15
#   - If too far from centerline → increase k_lateral to 1.0
#   - If overshoots centerline → reduce k_lateral to 0.6
#
# STEP 4: Tune curvature feedforward
#   - If understeers in corners → increase k_curvature to 1.2
#   - If oversteers in corners → reduce k_curvature to 0.8
#   - If path curvature is noisy → disable with use_curvature_feedforward = false
#
# STEP 5: Adjust steering filter
#   - If steering is jerky → reduce steering_alpha to 0.2
#   - If steering feels laggy → increase steering_alpha to 0.4
#
# EXPECTED PERFORMANCE:
# ====================
# - Lateral error: < 0.1m at straight sections
# - Lateral error: < 0.2m in moderate turns
# - Heading error: < 5 degrees in all conditions
# - Computational time: < 5ms per cycle
# - Stable at speeds: 0.5-8.0 m/s
# ============================================================================
