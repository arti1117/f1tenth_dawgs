path_planner_node:
  ros__parameters:
    # CSV file path - if empty, will wait for global_path_topic
    # Set to path like "/home/dawgs_nx/f1tenth_dawgs/src/peripheral/racetracks/track.csv"

    # Pre-conditions
    #   - check base_system(f1tenth) map
    #   - run speedopt or global_planner_offline
    csv_file_path: "/home/dawgs_nx/f1tenth_dawgs/src/peripheral/maps/mohyun_1029/mohyun_slam_ekf_iqp.csv"
    # "/home/dawgs_nx/f1tenth_dawgs/src/peripheral/maps/icheon/icheon1009_map_lippboyd_speedopted.csv"


    # Planner settings
    use_lattice: false              # DISABLED: Lattice causes planned_path to diverge from frenet_path
    use_frenet: true
    planner_horizon: 5.0

    # Path smooting
    enable_path_smooting: true
    path_smoothing_alpha: 0.4

    # Frenet trajectory generation settings
    frenet_time_horizon: 3.0      # Maximum time horizon for trajectory [s]
    frenet_min_time: 1.0           # Minimum time horizon [s]
    frenet_target_speed: 3.0       # Target speed [m/s]
    frenet_dt: 0.05                # Time step for trajectory sampling [s]
    frenet_max_speed: 12.0         # Maximum allowed speed [m/s]
    frenet_max_accel: 3.0          # Maximum lateral acceleration [m/s^2]
    frenet_lookahead_distance: 0.5 # Lookahead distance for frenet path starting point [m]

    # Lateral sampling (distance from centerline in meters)
    # NARROW RANGE: Reduced to ±1.0m for tighter obstacle avoidance
    frenet_d_samples: [-1.0, -0.6, -0.3, 0.0, 0.3, 0.6, 1.0]

    # Time horizon samples (in seconds)
    frenet_t_samples: [1.0, 1.5, 2.0, 2.5]

    # Cost function weights
    frenet_k_jerk: 0.3       # Jerk (smoothness) weight
    frenet_k_time: 0.1       # Time weight (prefer faster trajectories)
    frenet_k_deviation: 1.5  # INCREASED: Higher centerline preference to reduce avoidance distance
    frenet_k_velocity: 1.0   # Velocity error weight

    # Obstacle detection parameters
    obstacle_cluster_distance: 0.15      # Clustering distance for grouping scan points [m]
    obstacle_max_box_size: 0.8          # Max size for obstacle boxes; larger clusters = walls [m]
    obstacle_box_safety_margin: 0.2     # Safety margin around detected obstacles [m]

    # Wall detection parameters (walls modeled as line segments instead of boxes)
    wall_segment_length: 0.7            # Break walls into 0.5m segments [m]
    wall_segment_width: 0.3             # Width of wall segment boxes [m]
    path_clearance_radius: 0.6          # Filter scan points within 1.5m of global path [m]

    # Performance optimization parameters
    # Scan processing
    scan_downsample_factor: 7           # Use every Nth scan point (3=1/3 points, 5=1/5 points) - Higher = faster but less accurate

    # Detection toggles (disable for maximum performance)
    enable_obstacle_detection: true     # Toggle obstacle detection on/off - Set false to skip all obstacle processing
    enable_wall_detection: true         # Toggle wall detection on/off - Set false to skip wall segment processing

    # Obstacle processing optimization
    enable_obstacle_clustering: true    # If false, skip obstacle box creation entirely - Saves clustering computation
    enable_path_filtering: false         # Filter scan points near global path - Set false to skip (faster but may detect path as obstacle)
    obstacle_points_per_side: 3         # Points sampled per box side (6=24 points, 3=12 points) - Reduce for speed
    max_obstacles_to_process: 5         # Maximum number of obstacles to process - Cap to limit computation time

    # Wall processing optimization (SIGNIFICANT PERFORMANCE IMPACT)
    # =============================================================================
    # Wall detection is computationally expensive due to clustering and segmentation.
    # These parameters dramatically reduce wall computation without losing safety.
    # =============================================================================

    wall_sampling_distance: 0.8         # Min distance between wall segment samples [m]
                                         # EFFECT: Larger = fewer wall samples = faster processing
                                         # TYPICAL: 0.4-0.8m
                                         # NOTE: Original parameter, kept for compatibility

    wall_point_downsample: 3             # Downsample wall cluster points (1=all, 2=half, 3=1/3)
                                         # EFFECT: Reduces wall cluster points BEFORE segmentation
                                         # BENEFIT: 50-70% reduction in wall processing time
                                         # FORMULA: processed_points = original_points / downsample_factor
                                         # EXAMPLE: 100 wall points with factor=2 → 50 points processed
                                         # TYPICAL: 2-3 for good balance
                                         # TUNING: Higher = faster but coarser wall representation
                                         #         1 = no downsampling (maximum accuracy, slowest)
                                         #         2 = half points (recommended, 50% faster)
                                         #         3 = third points (fast, may miss small gaps)

    max_wall_distance: 15.0               # Ignore walls beyond this distance [m]
                                         # EFFECT: Filters out distant walls before processing
                                         # BENEFIT: 30-50% reduction for large environments
                                         # RATIONALE: Distant walls don't affect immediate planning
                                         # TYPICAL: 8.0-15.0m depending on environment size
                                         # TUNING: Smaller = faster but may ignore relevant walls
                                         #         Larger = more walls processed
                                         # RECOMMENDED: 10.0m for F1TENTH racing

    max_wall_segments: 30                # Maximum wall segments to create per frame
                                         # EFFECT: Hard limit on total wall segments
                                         # BENEFIT: Guarantees bounded computation time
                                         # RATIONALE: Prevents excessive segment creation in complex environments
                                         # TYPICAL: 50-200 segments
                                         # TUNING: Lower = faster but may truncate long walls
                                         #         Higher = complete walls but slower
                                         # NOTE: Processing stops when limit reached

    # WALL OPTIMIZATION IMPACT SUMMARY:
    # =================================
    # wall_point_downsample=2 → ~50% reduction in wall processing
    # max_wall_distance=10.0m → ~30-50% reduction (environment dependent)
    # max_wall_segments=100   → guaranteed upper bound on computation
    # COMBINED: Up to 70-80% reduction in wall computation time!

    # Frenet planner sampling (MAJOR PERFORMANCE IMPACT)
    # Total candidates = lateral_samples × time_samples
    # Default: 9 × 4 = 36 candidates
    # Fast: 5 × 2 = 10 candidates (72% reduction)
    frenet_lateral_samples: 7           # Number of lateral samples (-1.0 to +1.0) - Reduce to 5-7 for speed
    frenet_time_samples: 4              # Number of time horizon samples - Reduce to 2-3 for speed

    # Safety parameters
    # BALANCED: Moderate avoidance distance to prevent collisions without excessive detours
    frenet_safety_radius: 0.10           # Hard collision base radius [m]
    frenet_road_half_width: 1.5          # Half width of drivable area [m]

    # Enhanced safety parameters
    frenet_vehicle_radius: 0.05          # Vehicle footprint radius [m] - F1TENTH car width ~0.2m
    frenet_obstacle_radius: 0.10         # Expected obstacle radius [m]
    frenet_k_velocity_safety: 0.05       # Velocity-dependent safety gain
    frenet_min_safety_margin: 0.00       # Minimum safety margin [m]

    # ============================================================================
    # TWO-ZONE COST MODEL (PREVENTS TRACK CENTER BIAS)
    # ============================================================================
    # Two-zone model eliminates proximity costs beyond warning distance
    # This prevents the planner from being "pulled" toward track center
    #
    # ZONE 1: Collision Zone (< dynamic_safety)
    #   - Immediate trajectory rejection
    #   - dynamic_safety = vehicle_radius + obstacle_radius + min_safety_margin + k_velocity_safety * velocity
    #
    # ZONE 2: Warning Zone (dynamic_safety ≤ dist < warning_distance)
    #   - Linear cost penalty: 1.0 at collision edge → 0.0 at warning edge
    #   - Total cost contribution: warning_cost × penalty_factor
    #
    # ZONE 3: Safe Zone (dist ≥ warning_distance)
    #   - NO COST - trajectory is considered safe
    #   - This eliminates "track center bias" problem
    #
    # EFFECT: Vehicle can use full track width without being pulled to center
    # ============================================================================

    frenet_warning_distance: 0.5         # Warning zone outer distance [m]
                                         # EFFECT: Beyond this distance, obstacles have NO cost
                                         # PROBLEM SOLVED: Prevents track center bias
                                         # TUNING:
                                         #   - Too small (< 0.5m): May not give enough warning
                                         #   - Too large (> 1.5m): Creates proximity cost again
                                         #   - Recommended: 0.6-1.0m for F1TENTH
                                         # EXAMPLE: With dynamic_safety=0.4m, warning_distance=0.8m
                                         #          → Warning zone width = 0.4m
                                         #          → Wall at 1.0m distance = NO COST

    frenet_warning_cost: 7.0             # Cost weight in warning zone
                                         # EFFECT: Scales the linear penalty in warning zone
                                         #         Higher = stronger avoidance within warning zone
                                         #         Lower = more relaxed avoidance
                                         # FORMULA: cost += warning_cost × (1.0 - margin/warning_range)
                                         # TYPICAL: 3.0-10.0
                                         # TUNING:
                                         #   - Too low (< 2.0): May not avoid obstacles enough
                                         #   - Too high (> 15.0): Creates harsh penalties, similar to old proximity cost
                                         #   - Recommended: 5.0-8.0 for balanced avoidance

    frenet_interpolation_checks: 5       # More collision checks between samples

    # Visualization
    visualize_paths: true
    publish_rate: 1.0  # Hz for global path publishing

    # Debug log level (0=NONE, 1=ERROR, 2=WARN, 3=INFO, 4=DEBUG, 5=VERBOSE)
    log_level: 1  # DEBUG level for detailed obstacle avoidance debugging

    # Position compensation settings
    expected_computation_time: 0.01  # Expected computation time in seconds (10ms default)
    adaptive_compensation: true  # Enable adaptive computation time estimation

    # Simulation mode parameter
    sim_mode: false             # Enable simulation mode
    sim_odom: "/ego_racecar/odom"

    # Topics
    odom_topic: "/pf/pose/odom" # default was /odom
    scan_topic: "/scan"
    planned_path_topic: "/planned_path"
    global_path_topic: "/global_centerline"  # Published if CSV loaded
    frenet_path_topic: "/frenet_path"
    lut_path_topic: "/lut_path"

    # Frame
    frame_id: "map"

    # TODO: this is not used yet (seperate path)
    csv_file_dir: "/home/dawgs_nx/f1tenth_dawgs/src/peripheral/maps/"
    csv_file_name: ""

    # ============================================================================
    # PERFORMANCE PROFILES - Uncomment and adjust parameters for different scenarios
    # ============================================================================

    # --- MAXIMUM PERFORMANCE MODE (No obstacle avoidance) ---
    # Use when: Time trial, known track, no dynamic obstacles
    # Computation reduction: ~85%
    #
    # enable_obstacle_detection: false
    # enable_wall_detection: false
    # frenet_lateral_samples: 5
    # frenet_time_samples: 2
    # scan_downsample_factor: 6

    # --- BALANCED MODE (Good performance with obstacle avoidance) ---
    # Use when: Racing with occasional obstacles
    # Computation reduction: ~50%
    #
    # enable_obstacle_detection: true
    # enable_wall_detection: true
    # enable_obstacle_clustering: true
    # enable_path_filtering: true
    # obstacle_points_per_side: 4
    # max_obstacles_to_process: 30
    # frenet_lateral_samples: 7
    # frenet_time_samples: 3
    # scan_downsample_factor: 4

    # --- FULL SAFETY MODE (Maximum obstacle detection) ---
    # Use when: Unknown environment, many dynamic obstacles
    # Computation: 100% (no optimization)
    #
    # enable_obstacle_detection: true
    # enable_wall_detection: true
    # enable_obstacle_clustering: true
    # enable_path_filtering: true
    # obstacle_points_per_side: 8
    # max_obstacles_to_process: 100
    # frenet_lateral_samples: 11
    # frenet_time_samples: 5
    # scan_downsample_factor: 2
